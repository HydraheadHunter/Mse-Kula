	############################################################## Sorting mana symbols
	has_pt		:= {false}
	is_artifact	:= {false}
	is_spell		:= {false}

	# correctly sort a mana symbol (no guild mana)
	mana_sort       := sort_text@(order: "XYZI[0123456789]HS(WUBRG)")
	# correctly sort guild mana
	mana_sort_guild := sort_text@(order: "[XYZI01234567890HSWUBRG/|]") +
			replace@(
				match: "./.|././.|./././.|.[|]",
				in_context: "(^|[^/])<match>($|[^/])",
				replace: {sort_text(order:"in_place((WUBRG)")}
			)
	mana_has_guild := match@(match: "[/|]") # Is there guild or half mana in the input?
	# A mana cost can contain both normal and guild mana
	mana_filter := to_upper + {
		if mana_has_guild() then mana_sort_guild()
		else                     mana_sort()
	}
	# Like mana filter, only also allow tap symbols:
	tap_filter := sort_text@(order: "<CTQ>")
	mana_filter_t := replace@(               # Remove [] used for forcing mana symbols
				match: "[\\[\\]]",
				replace: ""
			) + { tap_filter() + mana_filter() }
	
	############################################################## Utilities for keywords
	
	# replaces — correctly
	add := "" # default is nothing
	for_mana_costs := format_cost := {
		if input.separator_before == "—" and contains(input.param, " ") then (
			if contains(input.param, match:",") then (
				if match(match: "^[HSCTQXYZIWUBRG0-9/|]+,", input.param) then
					"{add}<param-cost>{combined_cost(input.param)}</param-cost>"
				else "<param-cost>{combined_cost(input.param)}</param-cost>"
			) else
				"<param-cost>{alternative_cost(input.param)}</param-cost>"
		) else
			"{add}<param-mana>{input.param}</param-mana>"
	}
	alternative_cost := replace@(match:"^[A-Z]", replace: { to_lower() })
	combined_cost := replace@(match:", [A-Z]", replace: { to_lower() })+
		replace@(match:",", replace:" and")+
		replace@(match:"^[SCTQXYZIWUBRG0-9/|]", in_context: "(^|[[:space:]])<match>", replace: "<sym-auto>&</sym-auto>")+
		replace@(match:"^[A-Z]", replace: { to_lower() })
	long_dash := replace@(match:"-", replace:"—")
	
	# Converted mana cost
	is_half_mana    := match@(match: "1/2|[|][WUBRGSH]")
	is_colored_mana := match@(match: "[WUBRG]")
	only_numbers    := filter_text@(match: "^[0123456789]+")
	cmc_split := break_text@(match: "(?ix) 1/2 | [|][WUBRG] | [0-9]+(?!/[WUBRGSCTQ2]) | [WUBRGHS0-9](/[WUBRGS])\{0,4} ")
	cmc := {to_number(
		for each sym in cmc_split() do (
			numbers := only_numbers(sym)
			if is_half_mana(sym)  then 0.5
			else if numbers != "" then max(1, to_int(numbers))
			else                       1 # all other symbols are 1
		))
	}

	colored_mana := {to_number(
		for each sym in cmc_split() do (
			numbers := only_numbers(sym)
			if is_colored_mana(sym) then
				if is_half_mana(sym) then 0.5 else 1
			else 0
		))
	}
	
	############################################################## The text box
	
	# Filters for the text box
	# context in which mana symbols are found
	mana_context :=
		"(?ix)				# case insensitive, ignore whitespace
		 (^|[[:space:]\"(])		# start of a word
		 (  <match>:			# G: something
		 |  <match>,			# G, tap: something
		 |  <match>[ ]can[ ]be[ ]pay
		 |  (pays?|additional|costs?|the	# pay X. creatures cost 1 less. pay an additional G.
		    |adds?|pay(ed)?[ ](with|using)
		    )
		    ([ ]either)?			 # pay either X or Y
		    ([ ]<sym[^>]*>[CTQHSXYZIWUBRG0-9/|]+</sym[^>]*>[ ](and|or))* # pay X or Y
		    [ ]<match> 
		    ([,.)]|$				# (end of word)
		    |[ ][^ .,]*$			# still typing...
		    |[ ]( or | and | in | less | more | to ) # or next word is ...
		    )
	         )
		 |  <param-mana><match></param-mana>	# keyword argument that is declared as mana
		 |  <param-cost>[ ]*<match></param-cost>	# keyword argument that is declared as cost
		 |  <param-cost><match>,		# keyword argument that is declared as cost
		 ";
	# the rule text filter
	#  - adds mana symbols
	#  - makes text in parentheses italic
	text_filter := 
		# step 1 : remove all automatic tags
		remove_tag@(tag: "<sym-auto>") +
		remove_tag@(tag: "<i-auto>")   +
		remove_tag@(tag: "<nospellcheck") +
		# step 2 : reminder text for keywords
		expand_keywords@(
			condition: {
				correct_case or (mode != "pseudo" and not used_placeholders)
			}
			default_expand: {
				chosen(choice:if correct_case then mode else "lower case", set.automatic_reminder_text)
			},
			combine: {
				keyword  := "<nospellcheck>{keyword}</nospellcheck>"
				reminder := process_english_hints(reminder)
				if mode == "pseudo" then "<i-auto>{keyword}</i-auto>"
				else keyword + if expand then "<atom-reminder-{mode}> ({reminder})</atom-reminder-{mode}>" }
			) +
		# step 2b : move inline keywords' reminder text to the end of the line
		replace@(
			match: "(<atom-reminder-core>.*</atom-reminder-core></kw[^>]*>)([^\n(]+)",
			replace: "\\2\\1"
			) +
		replace@(
			match: "(<atom-reminder-old>.*</atom-reminder-old></kw[^>]*>)([^\n(]+)",
			replace: "\\2\\1"
			) +
		replace@(
			match: "(<atom-reminder-expert>.*</atom-reminder-expert></kw[^>]*>)([^\n(]+)",
			replace: "\\2\\1"
			) +
		# step 3 : expand shortcut words ~ and CARDNAME
		replace@(
			match: "CARDNAME",
			in_context: "(^|[[:space:]]|\\()<match>",
			replace: "<atom-cardname></atom-cardname>"
			) +
		# step 4 : fill in atom fields
		tag_contents@(
			tag: "<atom-cardname>",
			contents: { if card.name=="" then "CARDNAME" else card.name }
			) +
		# step 4.5 : explict non mana symbols
		replace@(
			match: "\\][HSCTQXYZIWUBRG0-9/|]+\\[",
			replace: {"<nosym>" + mana_filter_t() + "</nosym>"} ) +
		# step 5 : add mana & tap symbols
		replace@(
			match: "[HSCTQXYZIWUBRG0-9/|]+",
			in_context: mana_context,
			replace: {"<sym-auto>" + mana_filter_t() + "</sym-auto>"} ) +
		# step 5b : add explict mana symbols
		replace@(
			match: "\\[[HSCTQXYZIWUBRG0-9/|]+\\]",
			replace: {"<sym>" + mana_filter_t() + "</sym>"} ) +
		# step 7 : italic reminder text
		replace@(
		 	match: "[(][^)\n]*[)]?",
			in_context: "(^|[[:space:]])<match>|<atom-keyword><match></>",
		 	replace: "<i-auto>&</i-auto>") +
		# step 8 : automatic capitalization, but not after "("
		replace@(
			match: "[a-z]",
			in_context: "[ ]*: <match>|—<match>| — <match>",
			replace: { to_upper() })+
		curly_quotes
	
	############################################################## Other boxes
	# the flavor text filter
	#  - makes all text italic
	flavor_text_filter :=
		# step 1 : remove italic tags
		remove_tag@(tag: "<i-flavor>")   +
		# step 2 : surround by <i> tags
		{ "<i-flavor>" + input + "</i-flavor>" } +
		# curly quotes
		curly_quotes
	
	# Process the name for sorting rules
	sort_name :=
		# Remove "The", "A", and "And" at the beginning
		replace@(match: "^(The|An?) ", replace: "") +
		# Remove commas and apostrophes
		replace@(match: "(,|'|’)", replace: "") +
		# Remove bold and italic tags
		replace@(match: "(<b>|<i>|</b>|</i>)", replace: "") +
		# Make lowercase
		to_lower
	
	#Necessary to make magic-mana-future play nicely
	colorless_color := { "c" }
	
	word_count := break_text@(match:"[^[:space:]]+") + length
	line_count := split_text@(match:"\n+",include_empty:false) + length
	
	space_to_comma := replace@(match:"^[A-Z]", replace:",&")
	remove_first_comma := replace@(match:"^[,]", replace:"")
	all_planes := {
		remove_first_comma(
			for each card in set do
				space_to_comma(to_text(card.subtype))
		)
	}
	type_over_type := replace_rule(match:" ?-", replace:"")
	plane_type_filter :=
		tag_remove_rule(tag: "<word-list-") +
		{ if contains(card.supertype, match:"Plane") then "<word-list-plane>{input}</word-list-plane>"
		else input }
	ancestral_mana := {card.name == "nlsfajnalsjfa"}
	card_number := {
		position (
			of: card
			in: set
			order_by: { rarity_sort() + sort_index() + sort_name(card.name) }
			filter:   set_filter()
		) + 1
	}
	card_count := {
		number_of_items(in: set, filter: set_filter())
	}

	#Starting with M15, zero digits in card numbers should be shown up to three.
	card_number_m15 := { (if card_number() < 100 then "0" else "") + (if card_number() < 10 then "0" else "") + card_number() }
	card_count_m15 := { (if card_count() < 100 then "0" else "") + (if card_count() < 10 then "0" else "") + card_count() }
	is_masterpiece := { card.rarity == "masterpiece" }
	rarity_sort := {
		if card.shape == "token" then "T1"
		else if card.shape == "emblem" then "T2"
		else if card.shape == "rulestip" then "T3"
		else if card.shape == "counter" then "T4"
		else if card.shape == "checklist" then "T5"
		else if is_masterpiece() then "T6"
		else if set.sort_special_rarity == "with the rest" or card.rarity != "special" then " "
		else "S"
	}
	set_filter := {
		# TODO: what about rulestips?
		if card.shape == "token" or card.shape == "emblem" then
			{ card.shape == "token" or card.shape == "emblem" }
		else if card.shape == "rulestip" then
			{ card.shape == "rulestip" }
		else if card.shape == "counter" then
			{ card.shape == "counter" }
		else if card.shape == "checklist" then
			{ card.shape == "checklist" }
		else if is_masterpiece() then
			{ is_masterpiece() }
		else if set.sort_special_rarity != "separate numbering" then
			{ not is_masterpiece() and card.shape != "token" and card.shape != "emblem" and card.shape != "rulestip" and card.shape != "counter" and card.shape != "checklist"}
		else if card.rarity == "special" then
			{ not is_masterpiece() and card.shape != "token" and card.shape != "emblem" and card.shape != "rulestip" and card.shape != "counter" and card.shape != "checklist" and card.rarity == "special" }
		else
			{ not is_masterpiece() and card.shape != "token" and card.shape != "emblem" and card.shape != "rulestip" and card.shape != "counter" and card.shape != "checklist" and card.rarity != "special" }
	}
	sort_index := {
		(if contains(card.shape, match:"shifted") then "S" else " ") + # planeshifted cards come after normal ones
		(if contains(card.shape, match:"split")   then "S" else " ") + # split cards come after normal ones
		":"
	}
	card_shape := { "plane card" }
	is_nom := {card.supertype == "Phenomenon"}
	ancestral_mana := {"false"}
	use_v_mana := {contains(set.custom_mana_symbol_name, match:".png")}
	use_large_v_mana := { use_v_mana() and contains(set.mana_symbol_options, match:"casting")}
	use_small_v_mana := { use_v_mana() and contains(set.mana_symbol_options, match:"text")}
	use_color_v_mana := { use_v_mana() and contains(set.mana_symbol_options, match:"colored") and not use_hybrid_v_mana()}
	use_hybrid_v_mana := { use_v_mana() and contains(set.mana_symbol_options, match:"hybrid")}
	v_mana_name := {if not use_v_mana() then "" else replace(set.custom_mana_symbol_name, match:"(.+/|\\.png)", replace:"")}
	v_mana_loc := {if not use_v_mana() then "" else replace(set.custom_mana_symbol_name, match:"{v_mana_name()}\\.png", replace:"")}
