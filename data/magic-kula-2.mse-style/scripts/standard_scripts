##Type Boolean Functions
	is_planeswalker		:=	{ contains(card.super_type, match:"Planeswalker") 		}
	is_enchantment		:=	{ contains(card.super_type, match:"Enchantment") 		}
	is_legend 		:=	{ if is_planeswalker() then 	false else contains(card.super_type, match:"Legendary") }
	is_nyx			:=	{ true and is_enchantment() 					}
	is_nyx_legend		:=	{ is_legend() and is_nyx() 					}
	is_stamped		:=	{ styling.stamp_rares and is_rare()				}
	
#Visability boolean functions
	show_second_artist	:=	{ styling.has_two_artists					}
	show_indicator		:=	{ (has_identity() and not styling.override_default_show_indicator) or (not( has_identity()) and styling.override_default_show_indicator) }
	show_creator		:=	{ styling.card_creator						}
	
##Image Finding Functions	
	decide_border_directory	:= { "border/"+ (
					if 		is_planeswalker()	then	dir.def
					else if		is_nyx_legend()		then	dir.legend
					else if 	is_legend() 		then 	dir.legend 
					else if		is_nyx()		then	dir.def
					else						dir.def
	)
	}
	
	decide_card_directory	:= { "card/" +
					if 		is_planeswalker()	then	dir.planeswalker
					else if		is_nyx_legend()		then	dir.legend+dir.nyx
					else if 	is_legend() 		then 	dir.legend
					else if		is_nyx()		then	dir.nyx
					else						dir.def
}
	select_rarity_icon:=[
			common:			{ if input 
							then	symbol_variation(symbol: set.symbol, variation: "invertedcommon"	) 
							else	symbol_variation(symbol: set.symbol, variation: "common"		)}
			uncommon:		{		symbol_variation(symbol: set.symbol, variation: "uncommon"		)}
			rare:			{		symbol_variation(symbol: set.symbol, variation: "rare"			)}
			mythic:			{		symbol_variation(symbol: set.symbol, variation: "mythic rare"		)}
			special:		{		symbol_variation(symbol: set.symbol, variation: "special"		)}
			masterpiece:		{		symbol_variation(symbol: set.symbol, variation: "mythic rare"		)}
			common_abs:		{		symbol_variation(symbol: set.symbol, variation: "common"		)}
			common_inv:		{		symbol_variation(symbol: set.symbol, variation: "invertedcommon"	)}
		]

decide_symbol_pos	:=[ left:	{ if input then symbol_pos.def.no_symbol.left else symbol_pos.def.symbol.left			}	]
decide_name_pos		:=[ left:	{ if input then name_pos.def.no_symbol.left   else name_pos.def.symbol.left			},
			    right:	{ name_pos.def.symbol.right_max - input								}	]
decide_cost_pos		:=[ width:	{ max( cost_pos.def.width_min, input)								}	]
decide_identity_pos	:=[ left:	{  if show_indicator() then indicator_pos.def.indicator.left       else indicator_pos.def.no_indicator.left }	]
decide_type_pos		:=[ left:	{  if show_indicator() then type_pos.def.indicator.left      else type_pos.def.no_indicator.left		},
			    width:	{ (if show_indicator() then type_pos.def.indicator.width_max else type_pos.def.no_indicator.width_max) - max(22,card_style.rarity.content_width)	}
			]
			
decide_artist_arrow_pos	:=[ one:[ def:[	left:	{ artist_arrow_pos.one.def.left_base + input						}	]],
			    two:[ def:[	left:	{ artist_arrow_pos.two.def.left_base + input						}	]]
			]			
decide_illustrator_pos	:=[ one:[ def:[	left:	{illustrator_pos.one.def.left_base		+ input					},
					width:	{max(illustrator_pos.one.def.width_min,		card_style.illustrator.content_width)	}	]],
			    two:[ def:[ left:	{illustrator_pos.two.def.left_base		+ input					},
					width:	{max(illustrator_pos.two.def.width_min,		card_style.illustrator_2.content_width)	}	]]]
decide_creator_com_pos	:=[ def:[	left:	{ creator_com_pos.def.left_base			+ input						}	]]
decide_creator_credit_pos:=[ def:[	left:	{ creator_credit_pos.def.left_base		+ input 					}	]]


#Collections Credit & Copyright
	#Card Number
		determine_card_number		:=	{if is_auto_card_number() then write_card_number() else write_card_number_custom() }
		is_auto_card_number		:=	{set.automatic_card_numbers and not styling.remove_from_autocount	}
		write_card_number		:=	{forward_editor(prefix: card_number_m15() + "/" + card_count_m15() + 
							" " + rarity_code() + " ", field: card.card_code_text)		
		}
		write_card_number_custom	:=	{combined_editor(field1: card.custom_card_number, separator: " " + 
							rarity_code() + " ", field2: card.card_code_text)
		}
	