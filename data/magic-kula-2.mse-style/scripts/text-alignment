#Text Box
	text_filter		:=		text_filter + {
							if determine_will_override(type:"rules", other_type:"flavor")
								then assign_alignment(type:styling.rules_text_alignment_override, input)
								else assign_default_alignment(input)
	}
	flavor_text_filter	:=		flavor_text_filter + {
							if determine_will_override(type:"flavor", other_type:"rules")
								then assign_alignment(type:styling.flavor_text_alignment_override,input)
								else assign_default_alignment(input)
														
	}
	determine_will_override	:=	{	determine_may_override() and
						(
							(styling.override_default_alignment == "short {type} only" and check_is_short[type]()  )				 or
							(styling.override_default_alignment == "either short text" and check_is_short[type]()  )				 or
							(styling.override_default_alignment == "both short texts"  and check_is_short[type]() and check_is_short[other_type]() ) or
							(styling.override_default_alignment == "long {type} only" and not(check_is_short[type]()) )				 or
							(styling.override_default_alignment == "either long text" and not(check_is_short[type]()) )				 or
							(styling.override_default_alignment == "both long texts"  and not( check_is_short[type]() or check_is_short[other_type]() ))
						)
	}
	determine_may_override	:=	{ not (
						styling.override_default_alignment == "never" 				or
						styling.override_default_alignment == "short {other_type} only"		or
						styling.override_default_alignment == "long {other_type} only"
					)
	}
	check_is_short		:=	[
						flavor: {	not contains( match: "\n", card.flavor_text)	and length(card_style.flavor_text.layout.blocks[0].lines) <=2		}
						rules:	{	not contains( match: "\n", card.rule_text)	and length(card_style.text.layout.blocks[0].lines)	  <=2		}
	]
	assign_default_alignment:=	{	assign_alignment(type:styling.default_text_alignment, input)	}
	assign_alignment	:=	{	start_align[type] + input + stop_align[type]			}
	