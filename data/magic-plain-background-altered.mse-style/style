mse version: 2.0.0
game: magic
short name: Empty Frame
full name: Empty Frame
icon: card-sample.png
installer group: magic/styles/personal
position hint: 001

version: 2020-09-04
depends on:
	package: magic.mse-game
	version: 2020-04-25
depends on:
	package: magic-default-image.mse-include
	version: 2007-09-23
depends on:
	package: magic-watermarks.mse-include
	version: 2007-09-23
depends on:
	package: magic-identity-new.mse-include
	version: 2012-01-22
depends on:
	package: magic-mana-large.mse-symbol-font
	version: 2007-09-23
depends on:
	package: magic-mana-small.mse-symbol-font
	version: 2007-09-23
depends on:
	package: magic-mainframe-extras.mse-include
	version: 2018-01-01

card width: 375
card height: 523
card dpi: 150
##### Flavor bar image by SirnightNano
##### Ancestral generic mana by ancestral
##### Nyx crowns by Angelus
##### Companion crowns, nyx extensions, DOM FNM frame, THB fullart lands by silverback_ape
##### PUMA by kebelqwa and cajun
############################################################## Extra scripts
init script:
	# Load scripts for image box
	include file: /magic-default-image.mse-include/scripts
	
	# Should hybrids have a grey name?
	mask_hybrid_with_land := { styling.hybrid_name == "grey" }
	mask_hybrid_with_gold := { styling.hybrid_name == "gold" }
	
	#Should multicolor lands with basic land types have a colored name?
	mask_multi_land_with_color := { styling.colored_multicolor_land_name }
	
	base_template_prefix := [card: "" nyx: "nyx/" miracle: "miracles/" promo: "promo/" crown: "legend/" cons:"conspiracy/" curtain: "curtains/" fnm: "fnm/", fnmpt: "paradox/", map: "maps/" energy: "energies/", mappt: "maps/" pt: "", slide: "masks/", slide2: "masks/", arrow: "arrows/", arrow2: "arrows/", arrow3: "arrows/", season: "season/" stamp: "" identity: "/magic-identity-new.mse-include/"]
	shifted_template_prefix := [card: "shifted/" nyx: "nyx/" miracle: "shifted/" promo: "promo/" crown: "shifted/" cons:"conspiracy/" curtain: "curtains/" fnm:"fnm/", fnmpt: "paradox/", map: "maps/" energy: "energies/", mappt: "maps/" pt: "shifted/", slide: "shifted/", slide2: "shifted/", arrow: "arrows/", arrow2: "arrows/", arrow3: "arrows/", season: "season/" stamp: "shifted/" identity: "/magic-identity-new.mse-include/"]
	template_prefix := { if is_shifted() then shifted_template_prefix else base_template_prefix }
	template_suffix := [card: "card.jpg" nyx: "nyx.png" miracle: "miracle.png" promo: "card.jpg" crown: "crown.png" cons:"cons.png" curtain: "card.png" fnm:"card.png", fnmpt: "pt.png", map: "card.png", energy: "card.png", mappt: "pt.png" pt: "pt.png", slide: "slide.png", slide2: "slide2.png", stamp: "stamp.jpg", arrow: "arrow.png", arrow2: "arrow2.png", arrow3: "arrow3.png", season: "flag.png" identity: "identity.png"]
	template      := { crown_lead(type) + template_prefix()[type] + input + crown_follow(type) + template_suffix[type] }
	land_template := { crown_lead(type) + template_prefix()[type] + (if input == "a" then "c" else input) + (if landless(type) then "" else "l") + crown_follow(type) + template_suffix[type] }
	# Use land templates for previews because they show more contrast
	hybrid_previews := "land,hybrid"
	
	landless := {if input == "nyx" or input == "energy" or input == "season" or input == "cons" or input == "arrow" or input == "crown" or input == "nyxcrown" then true else false}
	
	crown_lead := {
		if input != "crown" then ""
		else if (styling.legend_crown == "custom" and styling.custom_crown_location != "")
			then "/magic-mainframe-extras.mse-include/" + styling.custom_crown_location
		else ""
	}
	crown_follow := {
		if input != "crown" then ""
		else if styling.legend_crown == "nyx" or (is_nyx() and chosen(styling.other_options, choice:"auto nyx crowns"))
			then "nyx"
		else if styling.legend_crown == "companion"
			then "com"
		else ""
	}
	transfer_levels := {if is_mutate() then false else true}
	nyx_background := { color_background(type:"nyx",     base_hybrid:card_hybrid) }
	fnm_background := { color_background(type:"fnm",     base_hybrid:card_hybrid) }
	miracle_background := { color_background(type:"miracle",     base_hybrid:card_hybrid) }
	map_background := { color_background(type:"map",     base_hybrid:card_hybrid) }
	energy_background := { color_background(type:"energy",     base_hybrid:card_hybrid) }
	promo_background := { color_background(type:"promo",     base_hybrid:card_hybrid) }
	fnm_ptbox := { color_background(type:"fnmpt",     base_hybrid:pt_hybrid) }
	mappt_background := { color_background(type:"mappt",     base_hybrid:pt_hybrid) }
	arrow_background := { color_background(type:"arrow",     base_hybrid:pt_hybrid) }
	arrow_background_2 := { color_background(type:"arrow2",     base_hybrid:pt_hybrid) }
	arrow_background_3 := { color_background(type:"arrow3",     base_hybrid:pt_hybrid) }
	crown_background := { color_background(type:"crown", base_hybrid: card_hybrid)}
	curtain_background := { color_background(type:"curtain", base_hybrid: card_hybrid)}
	cons_background := { color_background(type:"cons", base_hybrid: card_hybrid)}
	background_slide := { color_background(type:"slide", base_hybrid: card_hybrid)}
	background_slide_2 := { color_background(type:"slide2", base_hybrid: card_hybrid)}
	season_background := { color_background(type:"season",     base_hybrid:card_hybrid) }
	# Use the normal tap symbol
	mana_t := {
		if      styling.tap_symbol == "old"        then "old"
		else if styling.tap_symbol == "diagonal T" then "older"
		else                                            "new"
	}
	loyalty_image := {
		if      contains(input, match: "+") then "loyaltyup.png"
		else if contains(input, match: "-") then "loyaltydown.png"
		else                                     "loyaltynaught.png"
	}

	# Use guild mana symbols?
	guild_mana := { styling.use_guild_mana_symbols }
	
	# Is the card a promo card?
	is_promo := { styling.promo }
	is_stamped := {styling.use_holofoil_stamps and (card.rarity ==  "rare" or card.rarity == "mythic rare")}
	has_identity := { styling.color_indicator_dot }
	shrink_type := {if styling.shrink_typeline_text != "" then to_int(styling.shrink_typeline_text) else if length(remove_tags(card.type)) > 41 then 2 else if length(remove_tags(card.type)) > 38 then 1 else 0 }
	shrink_name := {if styling.shrink_name_text != "" then to_int(styling.shrink_name_text) else 0 }
	is_unsorted := {styling.remove_from_autocount}
	is_clear := { chosen(styling.frames, choice: "clear") and not is_map()}
	is_puma := { not is_expanded_art() and not is_full_art() and chosen(styling.frames, choice: "puma") and not is_map()}
	is_mutate := { not is_expanded_art() and not is_full_art() and chosen(styling.frames, choice: "mutate") and not is_map()}
	is_miracle := { chosen(styling.frames, choice: "miracle") and not is_map() and not is_expanded_art() and not is_cons() and not is_fnm()}
	is_nyx := { chosen(styling.frames, choice: "nyx") and not is_map() }
	is_vehicle := { chosen(styling.frames, choice: "vehicle") and not is_map()}
	is_cons := { chosen(styling.frames, choice: "conspiracy") or chosen(styling.frames, choice: "draft matters") and not is_map()}
	is_conspiracy := { chosen(styling.frames, choice: "conspiracy") and not is_map()}
	is_shifted := { chosen(styling.frames, choice: "planeshifted") and not is_map() and not is_full_art() and not is_fnm()}
	is_fnm := {chosen(styling.frames, choice:"fnm promo") and not is_clear() and not is_full_art() and not is_map()}
	is_map := { chosen(styling.frames, choice: "map") }
	is_season := { chosen(styling.frames, choice: "season") and not is_map() }
	is_legend := {not is_map() and (chosen(styling.frames, choice: "legend") or (set.auto_legends and contains(card.super_type, match:"Legendary"))) }
	is_full_art := {chosen(styling.frames, choice:"fullart") and not is_map() and not is_clear()}
	is_expanded_art := {not is_map() and not is_clear() and contains(styling.frames, match:"less art")}
	is_borderless := {not is_map() and not is_clear() and chosen(styling.frames, choice:"borderless art")}
	is_thbland := {chosen(styling.frames, choice:"frameless art") and not is_leveler() and remove_tags(card.text) == "\n"}
	expanded_mask := { "bigimagemasks/" + (if is_full_art() then "dka_" else "") + (if is_borderless() then (if is_stamped() then "rare_" else "") + "borderless_" else "") + "frameless.png"}
	is_curtains := {contains(card.notes, match:"!curtain")}
	use_main_rarity := { contains(set.mainframe_rarity_name, match: ".png")}
	un_png := replace@(match:".png", replace: "")
	ancestral_mana := { chosen(styling.other_options, choice:"ancestral generic mana")}
	override_clear := replace@(match:"</color>(</b></code>)?", replace: "")+
		replace@(match:"(<code><b>)?<color:black>", replace: "")
	override_filter := replace@(match:"\\[([^\\]]+)]", replace: "<code><b><color:black>[\\1]</color></b></code>")
	text_filter := text_filter + override_clear + {if chosen(styling.other_options, choice:"override-style text") then override_filter(input) else input}
	center_map := {is_map() and (card.casting_cost == "" or chosen(styling.other_options, choice:"always center map names"))}
	use_evobar := {chosen(styling.other_options, choice:"pokemon evobar")}
	is_skinned := {chosen(styling.other_options, choice:"godzilla style alias")}
	is_tarot := {chosen(styling.other_options, choice:"text watermarks")}
	chop_top := {if styling.chop_top == "" then 0 else if comma_count(styling.chop_top) == "," or comma_count(styling.chop_top) == ",," then split_text(match:",", styling.chop_top).0 else styling.chop_top}
	chop_bot := {if comma_count(styling.chop_top) == ",," then split_text(match:",", styling.chop_top).1 else if styling.chop_bottom == "" then 0 else styling.chop_bottom}
	top_of_textbox := {(if is_map() then 340 else if is_full_art() then 359 else if is_mutate() then 395 else 327) - (-chop_top()) }
	bottom_of_textbox := {(if is_map() then 475 else 481) - chop_bot() }

	bar_offset := {if styling_offset() == "-" then 0 else if styling_offset() != "" then -styling_offset() else 0}
	styling_offset := { replace(styling.flavor_bar_offset, match:"(u|d)+", replace: "") }
	offset_lines := {offset_counter(styling.flavor_bar_offset)}
	bar_equation := {if card_style.text.layout.blocks[0].bottom or else 0 > 0 then card_style.text.top + 0.5*(card_style.text.layout.blocks[0].bottom+card_style.text.layout.blocks[1].top) else old_bar_equation()}

	is_leveler := {chosen(styling.frames, choice:"leveler")}
	box_leveler := {styling.level_containers == "pt boxes"}
	loy_leveler := {styling.level_containers == "loyalty boxes"}
	aug_leveler := {box_leveler() and center_label(input)}
	level_label := {if styling.level_label == "" then "level" else pull_comma_array(styling.level_label, end:false, cell:input, default:styling.level_label)}
	center_label := {loy_leveler() or level_label(input) == " "}
	lv_1_height := {lv_2_coordinate()}
	lv_2_coordinate := {max(min(52 + to_number(pull_comma_array(styling.level_offset, cell:0))+(if is_full_art() then 20 else if is_mutate() then 12 else nil),152), 0)}
	lv_3_coordinate := {max(min(101 + to_number(pull_comma_array(styling.level_offset, cell:1)+(if is_full_art() then 10 else if is_mutate() then 12 else nil)),152), lv_2_coordinate())}
	lv_2_height := {lv_3_coordinate() - lv_2_coordinate()}
	lv_3_height := {152-lv_3_coordinate()}
	l1_center := {327 + (if is_full_art() then 16 else 0) + 0.5*lv_1_height()}
	l2_center := {327 + lv_2_coordinate() + 0.5*lv_2_height()}
	l3_center := {327 + lv_3_coordinate() + 0.5*lv_3_height()}
	overlay1 := {slice_crop(background_slide(), height: lv_2_height(), width:314, distance:(152-lv_2_coordinate()))}
	overlay2 := {slice_crop(background_slide_2(), height: lv_3_height(), width:314, distance:lv_3_height())}
	mask_height := {if input == "one" then lv_1_height() else if input == "two" then lv_2_height() else if input == "three" then lv_3_height() else 0}
	lone_pt := {chosen(styling.other_options, choice:"regular pt on levelers") and not starting_loyalty()}
	starting_loyalty := {chosen(styling.other_options, choice:"use starting loyalty")}
	choose_ptbox := {if is_fnm() then fnm_ptbox() else card_ptbox()}
	lv_2_ptbox := { if is_vehicle() then "vpt.png" else if is_clear() then "cpt.png" else if is_fnm() then fnm_ptbox() else leveler_ptbox2() }
	lv_3_ptbox := { if is_vehicle() then "vpt.png" else if is_clear() then "cpt.png" else if is_fnm() then fnm_ptbox() else leveler_ptbox3() }
	arrow_left := {if box_leveler() then -3 else if loy_leveler() then 10 else 18}
	arrow_width := {if box_leveler() then 84 else if loy_leveler() then 42 else 56}
	arrow_height := {if aug_leveler(input) then 42 else if box_leveler() then 50 else if loy_leveler() then 40 else 40}
	arrow_offset := {
		to_number(pull_comma_array(styling.arrow_or_bullet_offsets, cell:input, end: 0))
		+ (if box_leveler() then -5 else 0)
		+ (if aug_leveler(input) then 4 else 0)
	}

	special_text := {if is_leveler() then ((if card.level_0 != "" then "[" + level_label(0) + " " + card.level_0 + "] " else "") + card.level_1_text + (if card.pt != "" then " [" + card.pt + "]" else "") + "\n"
			+ (if card.level_1 != "" then "[" + level_label(1) + " " + card.level_1 + "] " else "") + card.level_2_text + (if card.pt_2 != "" then " [" + card.pt_2 + "]" else "") + "\n"
			+ (if card.level_2 != "" then "[" + level_label(2) + " " + card.level_2 + "] " else "") + card.level_3_text + (if card.pt_3 != "" then " [" + card.pt_3 + "]" else "")
		) else if is_mutate() then
			card.level_1_text + "\n" + card.text
		else ""
	}
	card_shape := {if is_leveler() then "leveler" else "normal"}
############################################################## Set info fields
set info style:
	symbol:
		variation:
			name: invertedcommon
			border radius: 0.10
			fill type: solid
			fill color:   rgb(255,255,255)
			border color: rgb(0,0,0)
set info style:
	symbol:
		variation:
			name: special
			border radius: 0.10
			fill type: solid
			fill color:   rgb(155,155,155)
			border color: rgb(0,0,0)
############################################################## Extra style options
styling field:
	type: text
	name: chop top
	description: Shrinks the textbox X pixels from the top OR shrinks "top,bottom,"
styling field:
	type: text
	name: chop bottom
	description: Shrinks the textbox X pixels from the bottom.
styling field:
	type: text
	name: shrink name text
	description: Reduces the name text N points.
styling field:
	type: text
	name: shrink typeline text
	description: Reduces the typeline text N points.
styling field:
	type: multiple choice
	name: frames
	description: Use these frames. Higher level frames may override lower levels.
	choice: map
	choice: clear
	choice: borderless art
	choice: frameless art
	choice: fullart
	choice: puma
	choice: mutate
	choice: fnm promo
	choice: planeshifted
	choice: legend
	choice: season
	choice: conspiracy
	choice: draft matters
	choice: miracle
	choice: vehicle
	choice: nyx
	choice: leveler
styling field:
	type: text
	name: flavor bar offset
	description: Move the flavor bar up X pixels. Use negative to move down.
styling field:
	type: text
	name: popout image style
	description: The styling instructions for the popout image field, formatted as "left,top,width,height,". The text MUST end with a comma.
styling field:
	type: choice
	name: legend crown
	choice: standard
	choice: nyx
	choice: companion
	choice: custom
	description: The type of legend crown to use for this card.
styling field:
	type: text
	name: custom crown location
	description: location of custom legend crown images in magic-mainframe-extras
styling field:
	type: multiple choice
	name: other options
	description: Other frame options
	choice: prerelease stamp
	choice: brown legendary vehicle pt
	choice: godzilla style alias
	choice: pokemon evobar
	choice: ancestral generic mana
	choice: override-style text
	choice: always center map names
	choice: use starting loyalty
	choice: regular pt on levelers
	choice: auto nyx crowns
	choice: text watermarks
	initial: auto nyx crowns
styling field:
	type: text
	name: font cap
	description: Caps the font size of all text boxes to allow consistent sizes. Default is 14.
styling field:
	type: text
	name: arrow or bullet offsets
	description: Formatted as 1,2,3,. Move the level arrow down X pixels. Use negative to move up.
styling field:
	type: text
	name: level offset
	description: Formatted as 1,2,3,. Move the level boxes down X pixels. Use negative to move up.
styling field:
	type: text
	name: level label
	description: Change the level label. default is "LEVEL". Secondary lables can be added after a comma, "1,2,3,"
styling field:
	type: choice
	name: level containers
	choice: arrows
	choice: pt boxes
	choice: loyalty boxes
styling field:
	type: boolean
	name: use holofoil stamps
	description: Change to no to disable rare holofoil stamps
styling field:
	type: boolean
	name: color indicator dot
	description: Use the color indicator dot
	initial: no
styling field:
	type: boolean
	name: remove from autocount
	description: Removes the automatic card number for specific cards, to allow for overcounted cards like in Planeswalker Decks.
	initial: no
styling field:
	type: choice
	name: hybrid name
	choice: grey
	choice: gold
	choice: hybrid
	description: Use a grey background for the name and type line on hybrid cards like real cards, or gold or hybrid instead.
styling field:
	type: boolean
	name: colored multicolor land name
	description: Use a colored background for the name and type on multicolor land cards with a basic land type. This is done on real cards.
styling field:
	type: boolean
	name: use guild mana symbols
	description: Use the Ravnica guild symbols instead of the official half/half circles for hybrid mana.
	initial: no
styling field:
	type: choice
	name: tap symbol
	description: What tap and untap symbols should be used on cards?
	initial: modern
	choice: modern
	choice: old
	choice: diagonal T
styling field:
	type: package choice
	name: text box mana symbols
	match: magic-mana-*.mse-symbol-font
	initial: magic-mana-small.mse-symbol-font
styling field:
	type: package choice
	name: level mana symbols
	match: magic-mana-*.mse-symbol-font
	initial: magic-mana-large.mse-symbol-font
styling field:
	type: choice
	name: center text
	description: When to center text (short text only means only on one-line cards with no flavor text)
	choice: always
	choice: short text only
	choice: never
	initial: never
styling field:
	type: boolean
	name: promo
	description: Is this card a promo card, with the "P" rarity?
	initial: no
styling field:
	type: boolean
	name: inverted common symbol
	description: Should the common rarity symbol be inverted, like in Coldsnap?
	initial: no
styling field:
	type: package choice
	name: overlay
	description: Should there be an overlay applied, such as foil?
	match: magic-overlay-*.mse-include
	required: false
styling style:
	use guild mana symbols:
		choice images:
			yes: /magic-mana-small.mse-symbol-font/mana_guild_rg.png
			no:  /magic-mana-small.mse-symbol-font/mana_rg.png
	tap symbol:
		render style: both
		choice images:
			modern:     /magic-mana-large.mse-symbol-font/mana_t.png
			old:        /magic-mana-large.mse-symbol-font/mana_t_old.png
			diagonal T: /magic-mana-large.mse-symbol-font/mana_t_older.png
	center text:
		render style: both
		choice images:
			always:          /magic.mse-game/icons/center-all-text.png
			short text only: /magic.mse-game/icons/center-short-text.png
			never:           /magic.mse-game/icons/center-no-text.png
	inverted common symbol:
		choice images:
			no:  { symbol_variation(symbol: set.symbol, variation: "common") }
			yes: { symbol_variation(symbol: set.symbol, variation: "invertedcommon") }
	frames:
		render style: checklist
		direction: vertical
	other options:
		render style: checklist
		direction: vertical
############################################################## Card fields
card style:
	############################# Background stuff
	border color:
		left: 0
		top : 0
		width:	{if is_borderless() then 0 else 375}
		height:	523
		radius: 18
		left width:   17
		right width:  17
		top width:    17
		bottom width: 18
		z index: 4
		mask: { (if is_puma() then "puma_" else "") + (if is_legend() then "crown_border" else "border_mask") + (if card.border_color == rgb(200,200,200) then "_silver" else "") + ".png" }
	
	card color:
		left:	0
		top:	0
		width:	375
		height:	523
		z index: 0
		render style: image
		popup style: in place
		image: { if is_clear() then "" else if is_fnm() then fnm_background() else if is_full_art() then promo_background() else card_background() }
	############################# Name line
extra card field:
	type: choice
	name: crown
	script: card.card_color
	editable: false
	save value: false
	show statistics: false
extra card style:
	crown:
		left: 0
		top: 0
		width: 375
		height: 523
		render style: image
		image: {if is_clear() then "legend/xcrown.png" else if is_fnm() then set_mask(image:crown_background(), mask:"legend/fnm_mask.png") else crown_background()}
		z index: 5
		visible: {is_legend() and not is_map()}
		mask: {if is_legend() and (is_curtains() or is_expanded_art() or is_puma()) then "curtainmask.png" else if is_season() then "crown_season_mask.png" else ""}
extra card field:
	type: choice
	name: nyx overlay
	choice: nyx
	save value: false
	editable: false
	script: card.card_color
extra card style:
	nyx overlay:
		left: 0
		top: 0
		width: 375
		height: 523
		render style: image
		image: {nyx_background()}
		z index: 0
		visible: {is_nyx()}
		mask: {"nyx/" + (if is_vehicle() then "v_" else "") + (if is_full_art() then "full" else "") + "mask.png"}
### FNM has a teeny mask because of a few pixel disagreements between it and normal frames